说明：下面的所有内容使用环境为MacOS系统
 一：
进入本地git shell, 生成自己的ssh-key, 联系三个回车
ssh-keygen -t rsa
登录GitLab，将本地生成的id_rsa.pub文件里的字符串填写到profile中


二：对新建Git项目，初始化，第一个commit:
Git global setup（Git全局设置）:

git config --global user.name "testman"
git config --global user.email "testman@hotmail.com"

三：创建仓库(Create Repository)
mkdir common-util
cd common-util
git init
touch README
git add README
git commit -m 'first commit'
git remote add origin git@127.0.0.1:devteam/common-util.git
git push -u origin master

对于已存在Git项目：
cd existing_git_repo 
git remote add origin ssh://git@111.202.214.196:22022/php/rzhycms.china.com.git
git clone ssh://git@111.202.214.196:22022/php/rzhycms.china.com.git

四、增加/删除文件
git add [file1] [file2] ...       # 添加指定文件到暂存区
git add [dir]                     # 添加指定目录到暂存区，包括子目录
git add .                         # 添加当前目录的所有文件到暂存区
git add -p                        # 添加每个变化前，都会要求确认   # 对于同一个文件的多处变化，可以实现分次提交
git rm [file1] [file2] ...        # 删除工作区文件，并且将这次删除放入暂存区
git rm --cached [file]            # 停止追踪指定文件，但该文件会保留在工作区
git mv [file-original] [file-renamed]       # 改名文件，并且将这个改名放入暂存区

五、代码提交

git commit -m [message]                           # 提交暂存区到仓库区
git commit [file1] [file2] ... -m [message]       # 提交暂存区的指定文件到仓库区
git commit -a                                     # 提交工作区自上次commit之后的变化，直接到仓库区
git commit -v                                     # 提交时显示所有diff信息
git commit --amend -m [message]                   # 使用一次新的commit，替代上一次提交    # 如果代码没有任何新变化，则用来改写上一次commit的提交信息
git commit --amend [file1] [file2] ...            # 重做上一次commit，并包括指定文件的新变化
说明：git commit　只是将代码提交到本地仓库区，需要再执行 git push -u origin master　提交到远程git仓库

六：从远程获取最新版本并merge到本地
git pull origin master

七：查看历史信息(很有用)
git log         会按提交时间列出所有的更新，最近的更新排在最上面
git log -p -1   常用 -p 选项显示每次提交的内容差异，数字 -1 则仅显示最近的一次更新
git log --stat  显示简要的增改行数统计
参数说明：
-(n)	仅显示最近的 n 条提交
--since, --after 仅显示指定时间之后的提交。
--until, --before 仅显示指定时间之前的提交。
--author 仅显示指定作者相关的提交。
--committer 仅显示指定提交者相关的提交

八：导出最后一次提交修改过的文件 
git archive -o ../updated.zip HEAD $(git diff --name-only HEAD^)
